# Generated by Django 4.2.23 on 2025-08-08 13:03

import django.core.validators
import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Genre",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Date and time when the record was created",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Designates whether this record should be treated as active",
                        verbose_name="is active",
                    ),
                ),
                (
                    "tmdb_id",
                    models.PositiveIntegerField(
                        db_index=True,
                        help_text="The Movie Database genre identifier",
                        unique=True,
                        verbose_name="TMDb ID",
                    ),
                ),
                (
                    "name",
                    models.CharField(
                        db_index=True,
                        help_text="Genre name",
                        max_length=50,
                        unique=True,
                        verbose_name="name",
                    ),
                ),
                (
                    "slug",
                    models.SlugField(
                        help_text="URL-friendly genre name",
                        unique=True,
                        verbose_name="slug",
                    ),
                ),
            ],
            options={
                "verbose_name": "Genre",
                "verbose_name_plural": "Genres",
                "db_table": "movies_genre",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="Movie",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Date and time when the record was created",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Designates whether this record should be treated as active",
                        verbose_name="is active",
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional data stored as JSON",
                        verbose_name="metadata",
                    ),
                ),
                (
                    "last_synced",
                    models.DateTimeField(
                        blank=True,
                        db_index=True,
                        help_text="Last time data was synchronized with TMDb",
                        null=True,
                        verbose_name="last synced",
                    ),
                ),
                (
                    "sync_status",
                    models.CharField(
                        choices=[
                            ("pending", "Pending"),
                            ("success", "Success"),
                            ("failed", "Failed"),
                            ("partial", "Partial"),
                        ],
                        db_index=True,
                        default="pending",
                        help_text="Status of last TMDb synchronization",
                        max_length=20,
                        verbose_name="sync status",
                    ),
                ),
                (
                    "sync_retries",
                    models.PositiveSmallIntegerField(
                        default=0,
                        help_text="Number of sync retry attempts",
                        verbose_name="sync retries",
                    ),
                ),
                (
                    "popularity",
                    models.FloatField(
                        db_index=True,
                        default=0.0,
                        help_text="TMDb popularity score",
                        verbose_name="popularity",
                    ),
                ),
                (
                    "vote_average",
                    models.FloatField(
                        db_index=True,
                        default=0.0,
                        help_text="Average user rating (0-10)",
                        verbose_name="vote average",
                    ),
                ),
                (
                    "vote_count",
                    models.PositiveIntegerField(
                        db_index=True,
                        default=0,
                        help_text="Total number of votes",
                        verbose_name="vote count",
                    ),
                ),
                (
                    "release_date",
                    models.DateField(
                        blank=True,
                        db_index=True,
                        help_text="Official release date",
                        null=True,
                        verbose_name="release date",
                    ),
                ),
                (
                    "title",
                    models.CharField(
                        db_index=True,
                        help_text="Movie title in English",
                        max_length=255,
                        verbose_name="title",
                    ),
                ),
                (
                    "original_title",
                    models.CharField(
                        db_index=True,
                        help_text="Original movie title in source language",
                        max_length=255,
                        verbose_name="original title",
                    ),
                ),
                (
                    "tagline",
                    models.CharField(
                        blank=True,
                        help_text="Movie tagline or slogan",
                        max_length=500,
                        verbose_name="tagline",
                    ),
                ),
                (
                    "overview",
                    models.TextField(
                        blank=True,
                        help_text="Movie plot summary",
                        verbose_name="overview",
                    ),
                ),
                (
                    "runtime",
                    models.PositiveIntegerField(
                        blank=True,
                        help_text="Runtime in minutes",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(600),
                        ],
                        verbose_name="runtime",
                    ),
                ),
                (
                    "status",
                    models.CharField(
                        choices=[
                            ("rumored", "Rumored"),
                            ("planned", "Planned"),
                            ("in_production", "In Production"),
                            ("post_production", "Post Production"),
                            ("released", "Released"),
                            ("canceled", "Canceled"),
                        ],
                        db_index=True,
                        default="released",
                        help_text="Movie release status",
                        max_length=20,
                        verbose_name="status",
                    ),
                ),
                (
                    "original_language",
                    models.CharField(
                        choices=[
                            ("en", "English"),
                            ("fr", "Français"),
                            ("ar", "العربية"),
                        ],
                        db_index=True,
                        default="en",
                        help_text="Original language of the movie",
                        max_length=10,
                        verbose_name="original language",
                    ),
                ),
                (
                    "budget",
                    models.BigIntegerField(
                        default=0,
                        help_text="Production budget in USD",
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="budget",
                    ),
                ),
                (
                    "revenue",
                    models.BigIntegerField(
                        default=0,
                        help_text="Box office revenue in USD",
                        validators=[django.core.validators.MinValueValidator(0)],
                        verbose_name="revenue",
                    ),
                ),
                (
                    "poster_path",
                    models.CharField(
                        blank=True,
                        help_text="TMDb poster image path",
                        max_length=500,
                        null=True,
                        verbose_name="poster path",
                    ),
                ),
                (
                    "backdrop_path",
                    models.CharField(
                        blank=True,
                        help_text="TMDb backdrop image path",
                        max_length=500,
                        null=True,
                        verbose_name="backdrop path",
                    ),
                ),
                (
                    "homepage",
                    models.URLField(
                        blank=True,
                        help_text="Official movie website",
                        verbose_name="homepage",
                    ),
                ),
                (
                    "tmdb_id",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="TMDb identifier",
                        max_length=20,
                        null=True,
                        unique=True,
                        verbose_name="TMDb ID",
                    ),
                ),
                (
                    "imdb_id",
                    models.CharField(
                        blank=True,
                        db_index=True,
                        help_text="IMDb identifier (e.g., tt1234567)",
                        max_length=20,
                        null=True,
                        unique=True,
                        verbose_name="IMDb ID",
                    ),
                ),
                (
                    "main_trailer_key",
                    models.CharField(
                        blank=True,
                        help_text="YouTube key for main trailer",
                        max_length=50,
                        null=True,
                        verbose_name="main trailer key",
                    ),
                ),
                (
                    "main_trailer_site",
                    models.CharField(
                        blank=True,
                        default="YouTube",
                        help_text="Video site (YouTube, Vimeo, etc.)",
                        max_length=20,
                        verbose_name="main trailer site",
                    ),
                ),
                (
                    "adult",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Adult content flag",
                        verbose_name="adult content",
                    ),
                ),
            ],
            options={
                "verbose_name": "Movie",
                "verbose_name_plural": "Movies",
                "db_table": "movies_movie",
                "ordering": ["-popularity", "-vote_average"],
            },
        ),
        migrations.CreateModel(
            name="MovieRecommendation",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Date and time when the record was created",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Designates whether this record should be treated as active",
                        verbose_name="is active",
                    ),
                ),
                (
                    "recommendation_type",
                    models.CharField(
                        choices=[
                            ("tmdb_recommendation", "TMDb Recommendation"),
                            ("tmdb_similar", "TMDb Similar Movies"),
                            ("genre_based", "Genre Based"),
                            ("collaborative", "Collaborative Filtering"),
                            ("content_based", "Content Based"),
                            ("popularity_based", "Popularity Based"),
                            ("user_similar", "Similar User Preferences"),
                            ("trending_similar", "Trending in Similar Categories"),
                        ],
                        db_index=True,
                        default="tmdb_recommendation",
                        help_text="Type of recommendation algorithm",
                        max_length=20,
                        verbose_name="recommendation type",
                    ),
                ),
                (
                    "confidence_score",
                    models.FloatField(
                        blank=True,
                        db_index=True,
                        help_text="Recommendation confidence (0.0-1.0), null for TMDb-based",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                        verbose_name="confidence score",
                    ),
                ),
                (
                    "source",
                    models.CharField(
                        choices=[
                            ("tmdb", "The Movie Database"),
                            ("internal", "Internal Algorithm"),
                            ("user_generated", "User Generated"),
                            ("hybrid", "Hybrid Algorithm"),
                        ],
                        default="tmdb",
                        help_text="Source of the recommendation",
                        max_length=20,
                        verbose_name="source",
                    ),
                ),
                (
                    "recommended_movie",
                    models.ForeignKey(
                        help_text="Recommended movie",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="movie_recommendations_to",
                        to="movies.movie",
                    ),
                ),
                (
                    "source_movie",
                    models.ForeignKey(
                        help_text="Movie that generates recommendations",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="movie_recommendations_from",
                        to="movies.movie",
                    ),
                ),
            ],
            options={
                "verbose_name": "Movie Recommendation",
                "verbose_name_plural": "Movie Recommendations",
                "db_table": "movies_movie_recommendation",
                "ordering": ["-confidence_score", "-created_at"],
            },
        ),
        migrations.CreateModel(
            name="MovieGenre",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Date and time when the record was created",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Designates whether this record should be treated as active",
                        verbose_name="is active",
                    ),
                ),
                (
                    "is_primary",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Primary genre for this movie",
                        verbose_name="is primary",
                    ),
                ),
                (
                    "weight",
                    models.FloatField(
                        blank=True,
                        default=1.0,
                        help_text="Genre relevance weight (0.0-1.0)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(0.0),
                            django.core.validators.MaxValueValidator(1.0),
                        ],
                        verbose_name="weight",
                    ),
                ),
                (
                    "genre",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="movie_genres",
                        to="movies.genre",
                    ),
                ),
                (
                    "movie",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="movie_genres",
                        to="movies.movie",
                    ),
                ),
            ],
            options={
                "verbose_name": "Movie Genre",
                "verbose_name_plural": "Movie Genres",
                "db_table": "movies_movie_genre",
                "ordering": ["-is_primary", "-weight", "genre__name"],
            },
        ),
        migrations.AddField(
            model_name="movie",
            name="genres",
            field=models.ManyToManyField(
                blank=True,
                help_text="Movie genres",
                related_name="movies",
                through="movies.MovieGenre",
                to="movies.genre",
            ),
        ),
        migrations.AddField(
            model_name="movie",
            name="related_movies",
            field=models.ManyToManyField(
                blank=True,
                help_text="Movies related to this movie (recommendations, similar, etc.)",
                related_name="recommended_by",
                through="movies.MovieRecommendation",
                to="movies.movie",
            ),
        ),
        migrations.AddIndex(
            model_name="genre",
            index=models.Index(
                fields=["tmdb_id"], name="movies_genr_tmdb_id_4ed139_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="genre",
            index=models.Index(fields=["name"], name="movies_genr_name_850734_idx"),
        ),
        migrations.AddIndex(
            model_name="genre",
            index=models.Index(fields=["slug"], name="movies_genr_slug_a56002_idx"),
        ),
        migrations.AddIndex(
            model_name="genre",
            index=models.Index(
                fields=["is_active"], name="movies_genr_is_acti_1928bc_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="movierecommendation",
            index=models.Index(
                fields=["source_movie", "recommendation_type"],
                name="movies_movi_source__00f23b_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="movierecommendation",
            index=models.Index(
                fields=["recommended_movie", "recommendation_type"],
                name="movies_movi_recomme_ae481b_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="movierecommendation",
            index=models.Index(
                fields=["confidence_score", "recommendation_type"],
                name="movies_movi_confide_04decf_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="movierecommendation",
            index=models.Index(
                fields=["source_movie", "confidence_score"],
                name="movies_movi_source__44f721_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="movierecommendation",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("source_movie", models.F("recommended_movie")), _negated=True
                ),
                name="no_self_recommendation",
            ),
        ),
        migrations.AlterUniqueTogether(
            name="movierecommendation",
            unique_together={
                ("source_movie", "recommended_movie", "recommendation_type")
            },
        ),
        migrations.AddIndex(
            model_name="moviegenre",
            index=models.Index(
                fields=["movie", "is_primary"], name="movies_movi_movie_i_7d146d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="moviegenre",
            index=models.Index(
                fields=["genre", "weight"], name="movies_movi_genre_i_5a3b7a_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="moviegenre",
            index=models.Index(
                fields=["is_primary", "weight"], name="movies_movi_is_prim_bcbc36_idx"
            ),
        ),
        migrations.AlterUniqueTogether(
            name="moviegenre",
            unique_together={("movie", "genre")},
        ),
        migrations.AddIndex(
            model_name="movie",
            index=models.Index(fields=["title"], name="movies_movi_title_652549_idx"),
        ),
        migrations.AddIndex(
            model_name="movie",
            index=models.Index(
                fields=["original_title"], name="movies_movi_origina_287505_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="movie",
            index=models.Index(
                fields=["tmdb_id", "is_active"], name="movies_movi_tmdb_id_c7b274_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="movie",
            index=models.Index(
                fields=["popularity", "vote_average"],
                name="movies_movi_popular_0e4eb9_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="movie",
            index=models.Index(
                fields=["release_date", "status"], name="movies_movi_release_0a7639_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="movie",
            index=models.Index(
                fields=["original_language", "adult"],
                name="movies_movi_origina_fdd7fa_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="movie",
            constraint=models.CheckConstraint(
                check=models.Q(
                    ("runtime__gte", 1), ("runtime__isnull", True), _connector="OR"
                ),
                name="valid_runtime",
            ),
        ),
        migrations.AddConstraint(
            model_name="movie",
            constraint=models.CheckConstraint(
                check=models.Q(("budget__gte", 0)), name="non_negative_budget"
            ),
        ),
        migrations.AddConstraint(
            model_name="movie",
            constraint=models.CheckConstraint(
                check=models.Q(("revenue__gte", 0)), name="non_negative_revenue"
            ),
        ),
    ]
