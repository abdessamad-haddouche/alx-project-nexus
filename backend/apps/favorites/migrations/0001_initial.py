# Generated by Django 4.2.23 on 2025-08-08 13:03

import django.core.validators
import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("movies", "0001_initial"),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name="Favorite",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Date and time when the record was created",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Designates whether this record should be treated as active",
                        verbose_name="is active",
                    ),
                ),
                (
                    "metadata",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional data stored as JSON",
                        verbose_name="metadata",
                    ),
                ),
                (
                    "user_rating",
                    models.PositiveSmallIntegerField(
                        blank=True,
                        db_index=True,
                        help_text="User's personal rating (1-10 scale)",
                        null=True,
                        validators=[
                            django.core.validators.MinValueValidator(1),
                            django.core.validators.MaxValueValidator(10),
                        ],
                        verbose_name="user rating",
                    ),
                ),
                (
                    "notes",
                    models.TextField(
                        blank=True,
                        help_text="User's personal notes about this movie",
                        max_length=1000,
                        verbose_name="notes",
                    ),
                ),
                (
                    "recommendation_source",
                    models.CharField(
                        blank=True,
                        choices=[
                            ("tmdb_recommendation", "TMDb Recommendation"),
                            ("tmdb_similar", "TMDb Similar Movies"),
                            ("genre_based", "Genre Based"),
                            ("collaborative", "Collaborative Filtering"),
                            ("content_based", "Content Based"),
                            ("popularity_based", "Popularity Based"),
                            ("user_similar", "Similar User Preferences"),
                            ("trending_similar", "Trending in Similar Categories"),
                        ],
                        help_text="How user discovered this movie (for analytics)",
                        max_length=30,
                        null=True,
                        verbose_name="recommendation source",
                    ),
                ),
                (
                    "first_favorited",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="When user first favorited this movie",
                        verbose_name="first favorited",
                    ),
                ),
                (
                    "last_interaction",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Last time user interacted with this favorite",
                        verbose_name="last interaction",
                    ),
                ),
                (
                    "is_watchlist",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Movie is in user's watchlist (want to watch)",
                        verbose_name="is watchlist",
                    ),
                ),
                (
                    "movie",
                    models.ForeignKey(
                        help_text="Movie that was favorited",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="favorited_by",
                        to="movies.movie",
                        verbose_name="movie",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User who favorited this movie",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="favorites",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="user",
                    ),
                ),
            ],
            options={
                "verbose_name": "Favorite",
                "verbose_name_plural": "Favorites",
                "db_table": "favorites_favorite",
                "ordering": ["-last_interaction", "-first_favorited"],
                "indexes": [
                    models.Index(
                        fields=["user", "movie"], name="favorites_f_user_id_67b8cf_idx"
                    ),
                    models.Index(
                        fields=["user", "is_active"],
                        name="favorites_f_user_id_f9209c_idx",
                    ),
                    models.Index(
                        fields=["user", "user_rating"],
                        name="favorites_f_user_id_c2cde3_idx",
                    ),
                    models.Index(
                        fields=["user", "is_watchlist"],
                        name="favorites_f_user_id_46090a_idx",
                    ),
                    models.Index(
                        fields=["movie", "user_rating"],
                        name="favorites_f_movie_i_4b39e5_idx",
                    ),
                    models.Index(
                        fields=["first_favorited"],
                        name="favorites_f_first_f_82fac9_idx",
                    ),
                    models.Index(
                        fields=["last_interaction"],
                        name="favorites_f_last_in_af3dba_idx",
                    ),
                ],
            },
        ),
        migrations.AddConstraint(
            model_name="favorite",
            constraint=models.UniqueConstraint(
                condition=models.Q(("is_active", True)),
                fields=("user", "movie"),
                name="unique_active_user_movie_favorite",
            ),
        ),
        migrations.AddConstraint(
            model_name="favorite",
            constraint=models.CheckConstraint(
                check=models.Q(
                    models.Q(("user_rating__gte", 1), ("user_rating__lte", 10)),
                    ("user_rating__isnull", True),
                    _connector="OR",
                ),
                name="valid_user_rating_range",
            ),
        ),
    ]
