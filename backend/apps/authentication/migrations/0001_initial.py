# Generated by Django 4.2.23 on 2025-08-08 13:02

import django.core.validators
import django.db.models.deletion
import django.utils.timezone
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Date and time when the record was created",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        db_index=True,
                        help_text="Required. User email address for authentication.",
                        max_length=254,
                        unique=True,
                        verbose_name="email address",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        help_text="User first name.",
                        max_length=50,
                        verbose_name="first name",
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        help_text="User last name.",
                        max_length=50,
                        verbose_name="last name",
                    ),
                ),
                (
                    "is_email_verified",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Email verification status.",
                        verbose_name="email verified",
                    ),
                ),
                (
                    "phone_number",
                    models.CharField(
                        blank=True,
                        help_text="Optional phone number.",
                        max_length=15,
                        null=True,
                        validators=[
                            django.core.validators.RegexValidator(
                                message='Phone number must be entered in format: "+999999999". Up to 15 digits allowed.',
                                regex="^\\+?1?\\d{9,15}$",
                            )
                        ],
                        verbose_name="phone number",
                    ),
                ),
                (
                    "date_of_birth",
                    models.DateField(
                        blank=True,
                        help_text="User birth date.",
                        null=True,
                        verbose_name="date of birth",
                    ),
                ),
                (
                    "avatar",
                    models.URLField(
                        blank=True,
                        help_text="Profile picture URL.",
                        max_length=500,
                        null=True,
                        verbose_name="avatar",
                    ),
                ),
                (
                    "role",
                    models.CharField(
                        choices=[
                            ("user", "Regular User"),
                            ("moderator", "Moderator"),
                            ("admin", "Administrator"),
                            ("superadmin", "Super Administrator"),
                        ],
                        db_index=True,
                        default="user",
                        help_text="User role for access control.",
                        max_length=20,
                        verbose_name="role",
                    ),
                ),
                (
                    "groups",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.group",
                        verbose_name="groups",
                    ),
                ),
                (
                    "user_permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="Specific permissions for this user.",
                        related_name="user_set",
                        related_query_name="user",
                        to="auth.permission",
                        verbose_name="user permissions",
                    ),
                ),
            ],
            options={
                "verbose_name": "User",
                "verbose_name_plural": "Users",
                "db_table": "auth_user",
            },
        ),
        migrations.CreateModel(
            name="SocialAuth",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Date and time when the record was created",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Designates whether this record should be treated as active",
                        verbose_name="is active",
                    ),
                ),
                (
                    "provider",
                    models.CharField(
                        choices=[
                            ("google", "Google OAuth"),
                            ("facebook", "Facebook OAuth"),
                            ("apple", "Apple Sign-In"),
                            ("twitter", "Twitter OAuth"),
                        ],
                        db_index=True,
                        help_text="OAuth provider name.",
                        max_length=20,
                        verbose_name="provider",
                    ),
                ),
                (
                    "provider_user_id",
                    models.CharField(
                        help_text="External user ID from provider.",
                        max_length=100,
                        verbose_name="provider user ID",
                    ),
                ),
                (
                    "provider_email",
                    models.EmailField(
                        help_text="Email from OAuth provider.",
                        max_length=254,
                        verbose_name="provider email",
                    ),
                ),
                (
                    "provider_data",
                    models.JSONField(
                        blank=True,
                        default=dict,
                        help_text="Additional provider data (name, profile picture, etc.).",
                        verbose_name="provider data",
                    ),
                ),
                (
                    "access_token",
                    models.TextField(
                        blank=True,
                        help_text="OAuth access token.",
                        null=True,
                        verbose_name="access token",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="Reference to User model.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="social_auths",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="user",
                    ),
                ),
            ],
            options={
                "verbose_name": "Social Authentication",
                "verbose_name_plural": "Social Authentications",
                "db_table": "auth_social_auth",
            },
        ),
        migrations.CreateModel(
            name="VerificationToken",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Date and time when the record was created",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Designates whether this record should be treated as active",
                        verbose_name="is active",
                    ),
                ),
                (
                    "token",
                    models.CharField(
                        db_index=True,
                        help_text="Unique verification token.",
                        max_length=255,
                        unique=True,
                        verbose_name="verification token",
                    ),
                ),
                (
                    "email",
                    models.EmailField(
                        help_text="Email address being verified.",
                        max_length=254,
                        verbose_name="email address",
                    ),
                ),
                (
                    "verification_type",
                    models.CharField(
                        choices=[
                            ("registration", "Account Registration"),
                            ("email_change", "Email Address Change"),
                            ("password_reset", "Password Reset"),
                        ],
                        db_index=True,
                        default="registration",
                        help_text="Type of email verification.",
                        max_length=20,
                        verbose_name="verification type",
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        db_index=True,
                        help_text="Token expiration timestamp.",
                        verbose_name="expires at",
                    ),
                ),
                (
                    "is_used",
                    models.BooleanField(
                        db_index=True,
                        default=False,
                        help_text="Whether the token has been used.",
                        verbose_name="is used",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User associated with this verification.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="email_verifications",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="user",
                    ),
                ),
            ],
            options={
                "verbose_name": "Token Verification",
                "verbose_name_plural": "Token Verifications",
                "db_table": "auth_verification",
                "indexes": [
                    models.Index(
                        fields=["user"], name="auth_verifi_user_id_d815b5_idx"
                    ),
                    models.Index(fields=["token"], name="auth_verifi_token_911fe6_idx"),
                    models.Index(fields=["email"], name="auth_verifi_email_50084b_idx"),
                    models.Index(
                        fields=["verification_type"],
                        name="auth_verifi_verific_dfeb20_idx",
                    ),
                    models.Index(
                        fields=["expires_at"], name="auth_verifi_expires_72dc85_idx"
                    ),
                ],
            },
        ),
        migrations.CreateModel(
            name="UserSession",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "created_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        db_index=True,
                        help_text="Date and time when the record was created",
                        verbose_name="created at",
                    ),
                ),
                (
                    "updated_at",
                    models.DateTimeField(
                        auto_now=True,
                        db_index=True,
                        help_text="Date and time when the record was last updated",
                        verbose_name="updated at",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        db_index=True,
                        default=True,
                        help_text="Designates whether this record should be treated as active",
                        verbose_name="is active",
                    ),
                ),
                (
                    "session_key",
                    models.CharField(
                        db_index=True,
                        help_text="Unique session identifier.",
                        max_length=255,
                        unique=True,
                        verbose_name="session key",
                    ),
                ),
                (
                    "login_method",
                    models.CharField(
                        choices=[
                            ("password", "Email/Password"),
                            ("google", "Google OAuth"),
                            ("facebook", "Facebook OAuth"),
                            ("token_refresh", "JWT Token Refresh"),
                        ],
                        default="password",
                        help_text="Authentication method used for login.",
                        max_length=20,
                        verbose_name="login method",
                    ),
                ),
                (
                    "ip_address",
                    models.GenericIPAddressField(
                        help_text="Client IP address.", verbose_name="IP address"
                    ),
                ),
                (
                    "user_agent",
                    models.TextField(
                        help_text="Browser/device user agent string.",
                        verbose_name="user agent",
                    ),
                ),
                (
                    "device_type",
                    models.CharField(
                        choices=[
                            ("desktop", "Desktop"),
                            ("mobile", "Mobile"),
                            ("tablet", "Tablet"),
                            ("tv", "TV"),
                            ("unknown", "Unknown"),
                        ],
                        default="unknown",
                        help_text="Detected device category.",
                        max_length=15,
                        verbose_name="device type",
                    ),
                ),
                (
                    "login_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="When the session was created.",
                        verbose_name="login time",
                    ),
                ),
                (
                    "last_activity",
                    models.DateTimeField(
                        auto_now=True,
                        help_text="Last time session was used.",
                        verbose_name="last activity",
                    ),
                ),
                (
                    "expires_at",
                    models.DateTimeField(
                        help_text="Session expiration timestamp.",
                        verbose_name="expires at",
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        help_text="User associated with this session.",
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="sessions",
                        to=settings.AUTH_USER_MODEL,
                        verbose_name="user",
                    ),
                ),
            ],
            options={
                "verbose_name": "User Session",
                "verbose_name_plural": "User Sessions",
                "db_table": "auth_user_session",
                "indexes": [
                    models.Index(
                        fields=["user"], name="auth_user_s_user_id_3dbb4f_idx"
                    ),
                    models.Index(
                        fields=["session_key"], name="auth_user_s_session_939fd1_idx"
                    ),
                    models.Index(
                        fields=["expires_at"], name="auth_user_s_expires_c416bc_idx"
                    ),
                ],
            },
        ),
        migrations.AddConstraint(
            model_name="usersession",
            constraint=models.UniqueConstraint(
                fields=("session_key",), name="unique_session_key"
            ),
        ),
        migrations.AddIndex(
            model_name="socialauth",
            index=models.Index(fields=["user"], name="auth_social_user_id_b338a9_idx"),
        ),
        migrations.AddIndex(
            model_name="socialauth",
            index=models.Index(
                fields=["provider"], name="auth_social_provide_1b3da9_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="socialauth",
            index=models.Index(
                fields=["provider", "provider_user_id"],
                name="auth_social_provide_0c3459_idx",
            ),
        ),
        migrations.AddConstraint(
            model_name="socialauth",
            constraint=models.UniqueConstraint(
                condition=models.Q(("is_active", True)),
                fields=("provider", "provider_user_id"),
                name="unique_active_provider_user",
            ),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["email"], name="auth_user_email_ece7f7_idx"),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(
                fields=["is_active", "is_email_verified"],
                name="auth_user_is_acti_0531df_idx",
            ),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(fields=["role"], name="auth_user_role_f90fd2_idx"),
        ),
        migrations.AddIndex(
            model_name="user",
            index=models.Index(
                fields=["date_joined"], name="auth_user_date_jo_f1a394_idx"
            ),
        ),
    ]
